# Default values for spire-server.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
namespace: spire
name: spire-server
serviceAccount: spire-server
trustDomain: "cluster.local"
clusterName: demo-cluster
replicas: 2
images:
  spireServer:
    image: gcr.io/spiffe-io/spire-server:1.4.1
    imagePullPolicy: "IfNotPresent"
  spireControllerManager:
    image: ghcr.io/spiffe/spire-controller-manager:0.2.1
    imagePullPolicy: "IfNotPresent"

# spire-server configuration values
# visit https://github.com/spiffe/spire/blob/v1.4.1/doc/spire_server.md#server-configuration-file for reference
configmaps:
  notifier:
    bundleName: trust-bundle
  serverConfig:
    bindAddress: "0.0.0.0"
    bindPort: "8081"
    socketPath: "/run/spire/sockets/api.sock"
    trustDomain: "cluster.local"
    dataDir: "/run/spire/server/data"
    logLevel: "DEBUG"
    caKeyType: "rsa-4096"
    defaultSvidTTL: "1h"
    caSubject:
      country: "US"
      organization: "SPIFFE"
      commonName: ""

    # federation configuration values
    federates: false
    federation:
        bundleEndpoint:
          address: "0.0.0.0"
          port: "8443"
          withAcme: false
          acme:
            directoryUrl: ""
            domainName: ""
            email: ""
            tosAccepted: ""
        federations:
          - federatesWith: "domain.test"
            bundleEndpointUrl: "https://192.168.0.16:4002"
            bundleEndpointProfile:
              profile: "https_spiffe"
              endpointSpiffeId: "spiffe://domain.test/spire/server"

    # plugin configuration values
    plugins:
      # DataStore configuration values
      dataStore:
        type: "sql"
        pluginData:
          dataBaseType: "sqlite3"
          connectionString: "/run/spire/data/datastore.sqlite3"

      # NodeAttestor configuration values
      nodeAttestor:
        attestor: "k8s_psat"
        pluginData:
          clusters:
            - clusterName: "demo-cluster"
              useTokenReviewApiValidation: "true"
              serviceAccountAllowList: "spire:spire-agent"

      # KeyManager configuration values
      keyManager:
        type: "disk"
        pluginData:
          keysPath: "/run/spire/data/keys.json"

      # Notifier configuration values
      notifier:
        type: "k8sbundle"
        configMap: "trust-bundle"
        configMapKey: "root-cert.pem"

      # UpstreamAuthority configuration values
      withUpstreamAuthority: false
    #    upstreamAuthority:
    #      type: "spire"
    #      serverAddress: "10.0.1.50"
    #      serverPort: "8081"
    #      workloadApiSocket: "/tmp/agent-nestedA.sock"

    #    upstreamAuthority:
    #      type: "disk"
    #      key_file_path = "/run/spire/data/upstream-ca.key.pem"
    #      cert_file_path = "/run/spire/data/upstream-ca.pem"
    #      bundle_file_path = "/run/spire/data/bundle.pem"

    # health_checks configuration values
    healthChecks:
      listenerEnabled: true
      bindAddress: "0.0.0.0"
      bindPort: "8080"
      livePath: "/live"
      readyPath: "/ready"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# services
serviceSpire:
  type: NodePort
  ports:
   - name: api
     port: 8081
     targetPort: 8081
     protocol: TCP
serviceBundleEndpoint:
  name: spire-server-bundle-endpoint
  type: NodePort
  ports:
    - name: api
      port: 8443
      protocol: TCP
serviceControllerWebhook:
  name: spire-controller-manager-webhook-service
  type: NodePort
  ports:
    - port: 443
      protocol: TCP
      targetPort: 9443

resources:
  requests:
    storage: "1Gi"

nodeSelector: {}

tolerations: []

affinity: {}

# roles and rolebindings
roles:
  clusterRole:
    name: spire-server-cluster-role
    rules:
      - apiGroups: [""]
        resources: ["nodes"]
        verbs: [ "get" ]
      - apiGroups: [ "authentication.k8s.io" ]
        resources: [ "tokenreviews" ]
        verbs: [ "get", "create" ]
  clusterRoleBinding:
    name: spire-server-cluster-role-binding
    subjects:
      - kind: ServiceAccount
        name: spire-server
        namespace: spire
    roleRef:
      kind: ClusterRole
      name: spire-server-cluster-role
      apiGroup: rbac.authorization.k8s.io
  role:
    name: spire-server-role
    rules:
      - apiGroups: [ "" ]
        resources: [ "pods" ]
        verbs: [ "get" ]
      - apiGroups: [ "" ]
        resources: [ "configmaps" ]
        resourceNames: [ "trust-bundle" ]
        verbs: [ "get", "patch" ]
  roleBinding:
    name: spire-server-role-binding
    subjects:
      - kind: ServiceAccount
        name: spire-server
        namespace: spire
    roleRef:
      kind: Role
      name: spire-server-role
      apiGroup: rbac.authorization.k8s.io