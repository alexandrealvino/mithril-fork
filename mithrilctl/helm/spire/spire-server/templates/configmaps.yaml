# ConfigMap containing the latest trust bundle for the trust domain. It is
# updated by SPIRE using the k8sbundle notifier plugin. SPIRE agents mount
# this config map and use the certificate to bootstrap trust with the SPIRE
# server during attestation.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configmaps.notifier.bundleName }}
  namespace: {{ .Values.namespace }}
---
# ConfigMap containing the SPIRE server configuration.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
data:
  server.conf: |
    server {
      bind_address = "{{ .Values.configmaps.serverConfig.bindAddress }}"
      bind_port = "{{ .Values.configmaps.serverConfig.bindPort }}"
      socket_path = "{{ .Values.configmaps.serverConfig.socketPath }}"
      trust_domain = "{{ .Values.configmaps.serverConfig.trustDomain }}"
      data_dir = "{{ .Values.configmaps.serverConfig.dataDir }}"
      log_level = "{{ .Values.configmaps.serverConfig.logLevel }}"
      ca_key_type = "{{ .Values.configmaps.serverConfig.caKeyType }}"
      default_svid_ttl = "{{ .Values.configmaps.serverConfig.defaultSvidTTL }}"
      ca_subject = {
        country = ["{{ .Values.configmaps.serverConfig.caSubject.country }}"],
        organization = ["{{ .Values.configmaps.serverConfig.caSubject.organization }}"],
        common_name = "{{ .Values.configmaps.serverConfig.caSubject.commonName }}",
      }
      {{ if eq .Values.configmaps.serverConfig.federates true }}

      federation {
        bundle_endpoint {
          address = "{{ .Values.configmaps.serverConfig.federation.bundleEndpoint.address }}"
          port = {{ .Values.configmaps.serverConfig.federation.bundleEndpoint.port }}
        }
        {{ range $index, $member := .Values.configmaps.serverConfig.federation.federations }}
        federates_with "{{ $member.federatesWith }}" {
          bundle_endpoint_url = "{{ $member.bundleEndpointUrl }}"
          bundle_endpoint_profile "{{ $member.bundleEndpointProfile.profile }}" {
            {{ if $member.bundleEndpointProfile.profile eq "https_spiffe" }}
            endpoint_spiffe_id = "{{ $member.bundleEndpointProfile.endpointSpiffeId }}"
            {{ else }}
            {}
            {{ end }}
          }
        }
        {{ end }}
      }
      {{ end }}
    }

    plugins {
      DataStore "{{ .Values.configmaps.serverConfig.plugins.dataStore }}" {
        plugin_data {
          database_type = "{{ .Values.configmaps.serverConfig.plugins.pluginData.dataBaseType }}"
          connection_string = "{{ .Values.configmaps.serverConfig.plugins.pluginData.connectionString }}"
        }
      }

      NodeAttestor "{{ .Values.configmaps.serverConfig.nodeAttestor.attestor }}" {
        plugin_data {
          clusters = {
            # NOTE: Change this to your cluster name
            {{ range $index, $member := .Values.configmaps.serverConfig.nodeAttestor.pluginData.clusters }}
            "{{ $member.clusterName }}" = {
              use_token_review_api_validation = {{ $member.useTokenReviewApiValidation }}
              service_account_allow_list = ["{{ $member.serviceAccountAllowList }}"]
            }
            {{ end }}
          }
        }
      }

      KeyManager "{{ .Values.configmaps.serverConfig.keyManager.type }}" {
        plugin_data {
          keys_path = "{{ .Values.configmaps.serverConfig.keyManager.pluginData.keysPath }}"
        }
      }

      Notifier "{{ .Values.configmaps.serverConfig.notifier.type }}" {
        plugin_data {
          namespace = "{{ .Values.namespace }}"
          config_map = "{{ .Values.configmaps.serverConfig.notifier.configMap }}"
          config_map_key = "{{ .Values.configmaps.serverConfig.notifier.configMapKey }}"
        }
      }

      {{ if eq .Values.configmaps.serverConfig.withUpstreamAuthority true }}
      UpstreamAuthority "{{ .Values.configmaps.serverConfig.upstreamAuthority.type }}" {
        plugin_data {
          {{ if eq .Values.configmaps.serverConfig.upstreamAuthority.type "spire" }}
          server_address = "{{ .Values.configmaps.serverConfig.upstreamAuthority.serverAddress }}",
          server_port = "{{ .Values.configmaps.serverConfig.upstreamAuthority.serverPort }}",
          workload_api_socket = "{{ .Values.configmaps.serverConfig.upstreamAuthority.workloadApiSocket }}"
          {{ end }}
          {{ if eq .Values.configmaps.serverConfig.upstreamAuthority.type "disk" }}
          cert_file_path = "{{ .Values.configmaps.serverConfig.upstreamAuthority.certFilePath }}",
          key_file_path = "{{ .Values.configmaps.serverConfig.upstreamAuthority.keyFilePath }}",
          {{ if not empty .Values.configmaps.serverConfig.upstreamAuthority.bundleFilePath }}
          bundle_file_path = "{{ .Values.configmaps.serverConfig.upstreamAuthority.bundleFilePath }}"
          {{ end }}
          {{ end }}
        }
      }
      {{ end }}
    }

    health_checks {
      listener_enabled = {{ .Values.configmaps.serverConfig.healthChecks.listenerEnabled }}
      bind_address = "{{ .Values.configmaps.serverConfig.healthChecks.bindAddress }}"
      bind_port = "{{ .Values.configmaps.serverConfig.healthChecks.bindPort }}"
      live_path = "{{ .Values.configmaps.serverConfig.healthChecks.livePath }}"
      ready_path = "{{ .Values.configmaps.serverConfig.healthChecks.readyPath }}"
    }
